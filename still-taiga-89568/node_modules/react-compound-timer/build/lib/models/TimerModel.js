'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _getTimeParts2 = require('../helpers/getTimeParts');

var _getTimeParts3 = _interopRequireDefault(_getTimeParts2);

var _TimerState = require('./TimerState');

var _TimerState2 = _interopRequireDefault(_TimerState);

var _Units = require('./Units');

var _Units2 = _interopRequireDefault(_Units);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var Timer = function () {
  function Timer(_ref) {
    var _ref$initialTime = _ref.initialTime,
        initialTime = _ref$initialTime === undefined ? 0 : _ref$initialTime,
        _ref$direction = _ref.direction,
        direction = _ref$direction === undefined ? 'forward' : _ref$direction,
        _ref$timeToUpdate = _ref.timeToUpdate,
        timeToUpdate = _ref$timeToUpdate === undefined ? 1000 : _ref$timeToUpdate,
        _ref$lastUnit = _ref.lastUnit,
        lastUnit = _ref$lastUnit === undefined ? _Units2.default.d : _ref$lastUnit,
        _ref$checkpoints = _ref.checkpoints,
        checkpoints = _ref$checkpoints === undefined ? [] : _ref$checkpoints,
        _ref$onChange = _ref.onChange,
        onChange = _ref$onChange === undefined ? function () {} : _ref$onChange;

    _classCallCheck(this, Timer);

    this.initialTime = initialTime;
    this.time = initialTime;
    this.direction = direction;
    this.timeToUpdate = timeToUpdate;
    this.lastUnit = lastUnit;
    this.checkpoints = checkpoints;
    this._state = new _TimerState2.default(onChange);
    this._onChange = onChange;

    this.timerId = null;
  }

  _createClass(Timer, [{
    key: '_getTimeParts',
    value: function _getTimeParts(time) {
      return (0, _getTimeParts3.default)(time, this.lastUnit);
    }
  }, {
    key: '_setTimerInterval',
    value: function _setTimerInterval() {
      var _this = this;

      var callImmediately = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;
      var timeToUpdate = this.timeToUpdate;

      var repeatedFunc = function repeatedFunc() {
        var oldTime = _this.time;
        var updatedTime = _this._computeTime();

        _this._onChange(_extends({}, _this._getTimeParts(updatedTime)));

        _this.checkpoints.map(function (_ref2) {
          var time = _ref2.time,
              callback = _ref2.callback;

          var checkForForward = time > oldTime && time <= updatedTime;
          var checkForBackward = time < oldTime && time >= updatedTime;
          var checkIntersection = _this.direction === 'backward' ? checkForBackward : checkForForward;

          if (checkIntersection) {
            callback();
          }
        });
      };

      callImmediately && this._onChange(_extends({}, this._getTimeParts(this.time)));

      this.timerId = setInterval(repeatedFunc, timeToUpdate);
    }
  }, {
    key: 'setTime',
    value: function setTime(time) {
      this.time = time;
    }
  }, {
    key: 'getTime',
    value: function getTime() {
      return this.time;
    }
  }, {
    key: 'setDirection',
    value: function setDirection(direction) {
      this.direction = direction;
    }
  }, {
    key: 'setCheckpoints',
    value: function setCheckpoints(checkpoints) {
      this.checkpoints = checkpoints;
    }
  }, {
    key: 'start',
    value: function start() {
      if (this._state.setPlaying()) {
        this._setTimerInterval(true);
      }
    }
  }, {
    key: 'resume',
    value: function resume() {
      if (!this._state.isStopped() && this._state.setPlaying()) {
        this._setTimerInterval();
      }
    }
  }, {
    key: 'pause',
    value: function pause() {
      if (this._state.setPaused()) {
        clearInterval(this.timerId);
      }
    }
  }, {
    key: 'stop',
    value: function stop() {
      if (this._state.setStopped()) {
        clearInterval(this.timerId);
      }
    }
  }, {
    key: 'reset',
    value: function reset() {
      this.time = this.initialTime;

      this._onChange(_extends({}, this._getTimeParts(this.time)));
    }
  }, {
    key: '_computeTime',
    value: function _computeTime() {
      var _state = this._state,
          time = this.time,
          direction = this.direction,
          timeToUpdate = this.timeToUpdate;


      if (_state.isPlaying()) {
        switch (direction) {
          case 'forward':
            this.time = time + timeToUpdate;
            return this.time;

          case 'backward':
            {
              this.time = time - timeToUpdate;

              if (this.time < 0) {
                this.stop();

                return 0;
              }

              return this.time;
            }

          default:
            return time;
        }
      }

      return time;
    }
  }, {
    key: 'state',
    get: function get() {
      return this._state.getState();
    }
  }, {
    key: 'timeParts',
    get: function get() {
      return this._getTimeParts(this._computeTime());
    }
  }]);

  return Timer;
}();

exports.default = Timer;