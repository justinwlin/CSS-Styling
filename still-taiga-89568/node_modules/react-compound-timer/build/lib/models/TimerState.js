'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var INITED = exports.INITED = 'INITED';
var PLAYING = exports.PLAYING = 'PLAYING';
var PAUSED = exports.PAUSED = 'PAUSED';
var STOPPED = exports.STOPPED = 'STOPPED';

var TimerState = function () {
  function TimerState() {
    var _this = this;

    var onChangeStatus = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : function () {};

    _classCallCheck(this, TimerState);

    this._onChange = function () {
      return onChangeStatus({ timerState: _this._state });
    };
    this._state = INITED;
  }

  _createClass(TimerState, [{
    key: 'getState',
    value: function getState() {
      return this._state;
    }
  }, {
    key: 'setInited',
    value: function setInited() {
      if (this._state === INITED) return false;

      this._state = INITED;

      this._onChange();

      return true;
    }
  }, {
    key: 'isInited',
    value: function isInited() {
      return this._state === INITED;
    }
  }, {
    key: 'setPlaying',
    value: function setPlaying() {
      if (this._state === PLAYING) return false;

      this._state = PLAYING;

      this._onChange();

      return true;
    }
  }, {
    key: 'isPlaying',
    value: function isPlaying() {
      return this._state === PLAYING;
    }
  }, {
    key: 'setPaused',
    value: function setPaused() {
      if (this._state !== PLAYING) return false;

      this._state = PAUSED;

      this._onChange();

      return true;
    }
  }, {
    key: 'isPaused',
    value: function isPaused() {
      return this._state === PAUSED;
    }
  }, {
    key: 'setStopped',
    value: function setStopped() {
      if (this._state === INITED) return false;

      this._state = STOPPED;

      this._onChange();

      return true;
    }
  }, {
    key: 'isStopped',
    value: function isStopped() {
      return this._state === STOPPED;
    }
  }]);

  return TimerState;
}();

exports.default = TimerState;