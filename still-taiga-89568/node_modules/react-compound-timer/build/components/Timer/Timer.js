'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _TimerModel = require('../../lib/models/TimerModel');

var _TimerModel2 = _interopRequireDefault(_TimerModel);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var TimerContext = _react2.default.createContext();

var TimerValue = function (_React$Component) {
  _inherits(TimerValue, _React$Component);

  function TimerValue() {
    _classCallCheck(this, TimerValue);

    return _possibleConstructorReturn(this, (TimerValue.__proto__ || Object.getPrototypeOf(TimerValue)).apply(this, arguments));
  }

  _createClass(TimerValue, [{
    key: 'shouldComponentUpdate',
    value: function shouldComponentUpdate(nextProps) {
      var value = this.props.value;


      if (value !== nextProps.value) {
        return true;
      }

      return false;
    }
  }, {
    key: 'render',
    value: function render() {
      var value = this.props.value;


      return String(value) || null;
    }
  }]);

  return TimerValue;
}(_react2.default.Component);

var Milliseconds = function Milliseconds() {
  return _react2.default.createElement(
    Timer.Consumer,
    null,
    function (_ref) {
      var ms = _ref.ms;
      return _react2.default.createElement(TimerValue, { value: ms });
    }
  );
};

var Seconds = function Seconds() {
  return _react2.default.createElement(
    Timer.Consumer,
    null,
    function (_ref2) {
      var s = _ref2.s;
      return _react2.default.createElement(TimerValue, { value: s });
    }
  );
};

var Minutes = function Minutes() {
  return _react2.default.createElement(
    Timer.Consumer,
    null,
    function (_ref3) {
      var m = _ref3.m;
      return _react2.default.createElement(TimerValue, { value: m });
    }
  );
};

var Hours = function Hours() {
  return _react2.default.createElement(
    Timer.Consumer,
    null,
    function (_ref4) {
      var h = _ref4.h;
      return _react2.default.createElement(TimerValue, { value: h });
    }
  );
};

var Days = function Days() {
  return _react2.default.createElement(
    Timer.Consumer,
    null,
    function (_ref5) {
      var d = _ref5.d;
      return _react2.default.createElement(TimerValue, { value: d });
    }
  );
};

var Timer = function (_React$PureComponent) {
  _inherits(Timer, _React$PureComponent);

  function Timer(props) {
    _classCallCheck(this, Timer);

    var _this2 = _possibleConstructorReturn(this, (Timer.__proto__ || Object.getPrototypeOf(Timer)).call(this, props));

    var _this2$props = _this2.props,
        initialTime = _this2$props.initialTime,
        direction = _this2$props.direction,
        timeToUpdate = _this2$props.timeToUpdate,
        lastUnit = _this2$props.lastUnit,
        checkpoints = _this2$props.checkpoints;


    _this2.timer = new _TimerModel2.default({
      initialTime: initialTime,
      direction: direction,
      timeToUpdate: timeToUpdate,
      lastUnit: lastUnit,
      checkpoints: checkpoints,
      onChange: _this2.setState.bind(_this2)
    });

    _this2.state = _extends({}, _this2.timer.timeParts);

    _this2.start = _this2.start.bind(_this2);
    _this2.pause = _this2.pause.bind(_this2);
    _this2.resume = _this2.resume.bind(_this2);
    _this2.stop = _this2.stop.bind(_this2);
    _this2.reset = _this2.reset.bind(_this2);
    _this2.setTime = _this2.setTime.bind(_this2);
    _this2.getTime = _this2.getTime.bind(_this2);
    _this2.getTimerState = _this2.getTimerState.bind(_this2);
    _this2.setDirection = _this2.setDirection.bind(_this2);
    _this2.setCheckpoints = _this2.setCheckpoints.bind(_this2);
    return _this2;
  }

  _createClass(Timer, [{
    key: 'componentDidMount',
    value: function componentDidMount() {
      var startImmediately = this.props.startImmediately;


      startImmediately && this.timer.start();
    }
  }, {
    key: 'componentWillUnmount',
    value: function componentWillUnmount() {
      this.timer.stop();
    }
  }, {
    key: 'setTime',
    value: function setTime(time) {
      this.timer.setTime(time);
    }
  }, {
    key: 'getTime',
    value: function getTime() {
      return this.timer.getTime();
    }
  }, {
    key: 'getTimerState',
    value: function getTimerState() {
      return this.timer.state;
    }
  }, {
    key: 'setDirection',
    value: function setDirection(direction) {
      this.timer.setDirection(direction);
    }
  }, {
    key: 'setCheckpoints',
    value: function setCheckpoints(checkpoints) {
      this.timer.setCheckpoints(checkpoints);
    }
  }, {
    key: 'start',
    value: function start() {
      this.timer.start();

      this.props.onStart();
    }
  }, {
    key: 'stop',
    value: function stop() {
      this.timer.stop();

      this.props.onStop();
    }
  }, {
    key: 'pause',
    value: function pause() {
      this.timer.pause();

      this.props.onPause();
    }
  }, {
    key: 'reset',
    value: function reset() {
      this.timer.reset();

      this.props.onReset();
    }
  }, {
    key: 'resume',
    value: function resume() {
      this.timer.resume();

      this.props.onResume();
    }
  }, {
    key: 'render',
    value: function render() {
      var start = this.start,
          pause = this.pause,
          resume = this.resume,
          stop = this.stop,
          reset = this.reset,
          getTime = this.getTime,
          getTimerState = this.getTimerState,
          setTime = this.setTime,
          setDirection = this.setDirection,
          setCheckpoints = this.setCheckpoints;
      var _state = this.state,
          ms = _state.ms,
          s = _state.s,
          m = _state.m,
          h = _state.h,
          d = _state.d,
          timerState = _state.timerState;
      var children = this.props.children;


      return _react2.default.createElement(
        TimerContext.Provider,
        {
          value: {
            ms: ms, s: s, m: m, h: h, d: d
          }
        },
        Timer.getUI(children, {
          start: start,
          resume: resume,
          pause: pause,
          stop: stop,
          reset: reset,
          getTime: getTime,
          getTimerState: getTimerState,
          setTime: setTime,
          setDirection: setDirection,
          setCheckpoints: setCheckpoints,
          timerState: timerState
        })
      );
    }
  }], [{
    key: 'getUI',
    value: function getUI(children, renderProps) {
      if (children === null) {
        return null;
      }

      if (Array.isArray(children) || _react2.default.isValidElement(children)) {
        return children;
      }

      if (children.prototype && children.prototype.isReactComponent) {
        return _react2.default.createElement(children, renderProps);
      }

      if (typeof children === 'function') {
        return children(renderProps);
      }

      throw new Error('Please use one of the supported APIs for children');
    }
  }]);

  return Timer;
}(_react2.default.PureComponent);

Timer.Consumer = TimerContext.Consumer;
Timer.Milliseconds = Milliseconds;
Timer.Seconds = Seconds;
Timer.Minutes = Minutes;
Timer.Hours = Hours;
Timer.Days = Days;

Timer.defaultProps = {
  timeToUpdate: 1000,
  direction: 'forward',
  initialTime: 0,
  startImmediately: true,
  lastUnit: 'd',
  checkpoints: [],
  children: null,
  onStart: function onStart() {},
  onResume: function onResume() {},
  onPause: function onPause() {},
  onStop: function onStop() {},
  onReset: function onReset() {}
};

Timer.propTypes = {
  /** Timer count direction */
  direction: _propTypes2.default.oneOf(['forward', 'backward']),
  /** Inittial time on timer */
  initialTime: _propTypes2.default.number,
  /** Time to rerender */
  timeToUpdate: _propTypes2.default.number,
  /** Start timer immediately after render */
  startImmediately: _propTypes2.default.bool,
  /** Function that will be called on timer start */
  onStart: _propTypes2.default.func,
  /** Function that will be called on timer resume */
  onResume: _propTypes2.default.func,
  /** Function that will be called on timer pause */
  onPause: _propTypes2.default.func,
  /** Function that will be called on timer stop */
  onStop: _propTypes2.default.func,
  /** Function that will be called on timer reset */
  onReset: _propTypes2.default.func,
  /** Last unit will accumulate time, for example, 26 hours or 90 seconds */
  lastUnit: _propTypes2.default.oneOf(['ms', 's', 'm', 'h', 'd']),
  /** Time checkpoints with callback functions */
  checkpoints: _propTypes2.default.arrayOf(_propTypes2.default.shape({
    time: _propTypes2.default.number,
    callback: _propTypes2.default.func
  })),

  children: _propTypes2.default.any
};

exports.default = Timer;